//The Purpose of this code is to introduce generic programming and the use of templates
//swap() and sort() functions will be used to implement a selection sort
//assume that they are working on either references of a template type or a vector of that template type




#include <iostream>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <string>


// Prints a Vector of any type
template <typename T>                       //Function Template
void printAVec(std::vector<T> aVector) 
{
    for (auto aThing : aVector) 
    {
        std::cout << aThing << " ";
    }
    std::cout << std::endl;
}




//Bubble Sort Function
//Unlike Arrays, we only need to pass a reference to the vector we wish to sort
//and use the vector's own functions
template <typename T>
void bubbleSort(std::vector<T> &data) 
{
    int maxElement;
    int index;
    for (maxElement = data.size() - 1; maxElement > 0; maxElement--)
    {
        for (index = 0; index < maxElement; index++) 
        {
            if (data[index] > data[index + 1]) 
            {
                std::swap(data[index], data[index + 1]);  //previously  swap(data                                           [index], data[index +                                            1]);
                                                           //Vector Ver of swap
            }
        }
    }
}



struct Employee
{
    int empId;
    std::string name;

    Employee(int id, std::string empName) : empId(id), name(empName) {}
    friend std::ostream & operator<< (std::ostream &out, const Employee &emp);

    inline bool operator<(const Employee &anotherEmp) const
    {
        return empId < anotherEmp.empId;
    };

    inline bool operator>(const Employee &anotherEmp) const
    {
        return empId > anotherEmp.empId;
    }

    inline bool operator==(const Employee &anotherEmp) const
    {
        return empId == anotherEmp.empId;
    }
};

//operator override
std::ostream & operator << (std::ostream &out, const Employee &emp)
{
    out << " Employee Name: " << emp.name << std::endl;
    out << " Id Number:   : " << emp.empId << std::endl;
    out << std::endl;
    return out;
}

int main()
{

    //created vectors

    std::vector<int> numVals = { 1, 2, 3, 4, 5 };
    std::vector<double> doubleVals = { 10.33, 9.87, 6.7, 7.11, 8.88 };
    std::vector<std::string> stringNames = { "bob", "billy", "trashcan", "muffin", "moomoo" };

    //sorted vectors
    bubbleSort(numVals);
    bubbleSort(doubleVals);
    bubbleSort(stringNames);


    //Printed Vectors

    std::cout << "Integer Vector Sorted: ";
    printAVec(numVals);

    std::cout << "Double Vector Sorted: ";
    printAVec(doubleVals);

    std::cout << "String Vector Sorted: ";
    printAVec(stringNames);


    //create employee vector
    std::vector<Employee> employeeInfo = 
    { 
        Employee{1, "Lewylee"},
        Employee{54, "BillyBob"},
        Employee{8,"Norris"} 
    };

    //sort the employees
    bubbleSort(employeeInfo);

    //print the employees
    std::cout << "Sorted Employee Vector:\n";
    for (const auto& employee : employeeInfo) 
    {
        std::cout << employee;
    }

    return 0;
}
